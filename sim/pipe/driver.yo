                            | #######################################################################
                            | # Test for copying block of size K;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f43004000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f2ffffffffffffffff | 	irmovq $K, %rdx		# src and dst have K elements
0x014: 30f6a803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f79803000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 802c02000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x03b: 6300                 | 	xorq %rax,%rax
0x03d: 705001000000000000   | 	jmp StartLoop6
                            | 
0x046:                      | Loop6:
0x046: 50870000000000000000 | 	mrmovq (%rdi),%r8
0x050: 50970800000000000000 | 	mrmovq 8(%rdi),%r9
0x05a: 40860000000000000000 | 	rmmovq %r8,(%rsi)
0x064: 40960800000000000000 | 	rmmovq %r9,8(%rsi)
0x06e: 6288                 | 	andq %r8,%r8
0x070: 718300000000000000   | 	jle L61
0x079: c0f00100000000000000 | 	iaddq $1,%rax
0x083:                      | L61:	
0x083: 6299                 | 	andq %r9,%r9
0x085: 719800000000000000   | 	jle L62
0x08e: c0f00100000000000000 | 	iaddq $1,%rax
0x098:                      | L62:
0x098: 50871000000000000000 | 	mrmovq 16(%rdi),%r8
0x0a2: 50971800000000000000 | 	mrmovq 24(%rdi),%r9
0x0ac: 40861000000000000000 | 	rmmovq %r8,16(%rsi)
0x0b6: 40961800000000000000 | 	rmmovq %r9,24(%rsi)
0x0c0: 6288                 | 	andq %r8,%r8
0x0c2: 71d500000000000000   | 	jle L63
0x0cb: c0f00100000000000000 | 	iaddq $1,%rax
0x0d5:                      | L63:	
0x0d5: 6299                 | 	andq %r9,%r9
0x0d7: 71ea00000000000000   | 	jle L64
0x0e0: c0f00100000000000000 | 	iaddq $1,%rax
0x0ea:                      | L64:
0x0ea: 50872000000000000000 | 	mrmovq 32(%rdi),%r8
0x0f4: 50972800000000000000 | 	mrmovq 40(%rdi),%r9
0x0fe: 40862000000000000000 | 	rmmovq %r8,32(%rsi)
0x108: 40962800000000000000 | 	rmmovq %r9,40(%rsi)
0x112: 6288                 | 	andq %r8,%r8
0x114: 712701000000000000   | 	jle L65
0x11d: c0f00100000000000000 | 	iaddq $1,%rax
0x127:                      | L65:	
0x127: 6299                 | 	andq %r9,%r9
0x129: 713c01000000000000   | 	jle L66
0x132: c0f00100000000000000 | 	iaddq $1,%rax
0x13c:                      | L66:
                            | 
0x13c: c0f73000000000000000 | 	iaddq $48,%rdi
0x146: c0f63000000000000000 | 	iaddq $48,%rsi
0x150:                      | StartLoop6:
0x150: c0f2faffffffffffffff | 	iaddq $-6,%rdx
0x15a: 754600000000000000   | 	jge Loop6
                            | 	
0x163: c0f20600000000000000 | 	iaddq $6,%rdx
0x16d: 70dc01000000000000   | 	jmp StartLoop2
0x176:                      | Loop2:
0x176: 50870000000000000000 | 	mrmovq (%rdi),%r8
0x180: 50970800000000000000 | 	mrmovq 8(%rdi),%r9
0x18a: 40860000000000000000 | 	rmmovq %r8,(%rsi)
0x194: 40960800000000000000 | 	rmmovq %r9,8(%rsi)
0x19e: 6288                 | 	andq %r8,%r8
0x1a0: 71b301000000000000   | 	jle L21
0x1a9: c0f00100000000000000 | 	iaddq $1,%rax
0x1b3:                      | L21:	
0x1b3: 6299                 | 	andq %r9,%r9
0x1b5: 71c801000000000000   | 	jle L22
0x1be: c0f00100000000000000 | 	iaddq $1,%rax
0x1c8:                      | L22:
                            | 
0x1c8: c0f71000000000000000 | 	iaddq $16,%rdi
0x1d2: c0f61000000000000000 | 	iaddq $16,%rsi
0x1dc:                      | StartLoop2:
0x1dc: c0f2feffffffffffffff | 	iaddq $-2,%rdx
0x1e6: 757601000000000000   | 	jge Loop2
                            | 
0x1ef: 50370000000000000000 | 	mrmovq (%rdi),%rbx
0x1f9: c0f20100000000000000 | 	iaddq $1,%rdx
0x203: 742b02000000000000   | 	jne Done
0x20c: 40360000000000000000 | 	rmmovq %rbx,(%rsi)
0x216: 6233                 | 	andq %rbx,%rbx
0x218: 712b02000000000000   | 	jle Done
0x221: c0f00100000000000000 | 	iaddq $1,%rax
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x22b:                      | Done:
0x22b: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x22c:                      | End:
                            | #/* $end ncopy-ys */
0x22c:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 0.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x22c:                      | check:
                            | 	# Return value test
0x22c: 30fa0000000000000000 | 	irmovq $0,%r10
0x236: 61a0                 | 	subq %r10,%rax
0x238: 735402000000000000   | 	je checkb
0x241: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x24b: 709203000000000000   | 	jmp cdone
0x254:                      | checkb:
                            | 	# Code length check
0x254: 30f02c02000000000000 | 	irmovq EndFun,%rax
0x25e: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x268: 6120                 | 	subq %rdx,%rax
0x26a: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x274: 6102                 | 	subq %rax,%rdx
0x276: 759202000000000000   | 	jge checkm
0x27f: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x289: 709203000000000000   | 	jmp cdone
0x292:                      | checkm:
0x292: 30f2a803000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x29c: 30f39803000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x2a6: 30f7ffffffffffffffff | 	irmovq $K,%rdi  # Count
0x2b0: 6277                 | 	andq %rdi,%rdi
0x2b2: 731003000000000000   | 	je checkpre         # Skip check if count = 0
0x2bb:                      | mcloop:
0x2bb: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x2c5: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x2cf: 6160                 | 	subq %rsi,%rax
0x2d1: 73ed02000000000000   | 	je  mok
0x2da: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x2e4: 709203000000000000   | 	jmp cdone
0x2ed:                      | mok:
0x2ed: 30f00800000000000000 | 	irmovq $8,%rax
0x2f7: 6002                 | 	addq %rax,%rdx	  # dest ++
0x2f9: 6003                 | 	addq %rax,%rbx    # src++
0x2fb: 30f00100000000000000 | 	irmovq $1,%rax
0x305: 6107                 | 	subq %rax,%rdi    # cnt--
0x307: 76bb02000000000000   | 	jg mcloop
0x310:                      | checkpre:
                            | 	# Check for corruption
0x310: 30f2a003000000000000 | 	irmovq Predest,%rdx
0x31a: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x324: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x32e: 6120                 | 	subq %rdx,%rax
0x330: 734c03000000000000   | 	je checkpost
0x339: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x343: 709203000000000000   | 	jmp cdone
0x34c:                      | checkpost:
                            | 	# Check for corruption
0x34c: 30f2a803000000000000 | 	irmovq Postdest,%rdx
0x356: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x360: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x36a: 6120                 | 	subq %rdx,%rax
0x36c: 738803000000000000   | 	je checkok
0x375: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x37f: 709203000000000000   | 	jmp cdone
0x388:                      | checkok:
                            | 	# Successful checks
0x388: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x392:                      | cdone:
0x392: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x398:                      | 	.align 8
0x398:                      | src:
0x398: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x3a0:                      | 	.align 16
0x3a0:                      | Predest:
0x3a0: fadebc0000000000     | 	.quad 0xbcdefa
0x3a8:                      | dest:
0x3a8:                      | Postdest:
0x3a8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x3b0:                      | .align 8
                            | # Run time stack
0x3b0: 0000000000000000     | 	.quad 0
0x3b8: 0000000000000000     | 	.quad 0
0x3c0: 0000000000000000     | 	.quad 0
0x3c8: 0000000000000000     | 	.quad 0
0x3d0: 0000000000000000     | 	.quad 0
0x3d8: 0000000000000000     | 	.quad 0
0x3e0: 0000000000000000     | 	.quad 0
0x3e8: 0000000000000000     | 	.quad 0
0x3f0: 0000000000000000     | 	.quad 0
0x3f8: 0000000000000000     | 	.quad 0
0x400: 0000000000000000     | 	.quad 0
0x408: 0000000000000000     | 	.quad 0
0x410: 0000000000000000     | 	.quad 0
0x418: 0000000000000000     | 	.quad 0
0x420: 0000000000000000     | 	.quad 0
0x428: 0000000000000000     | 	.quad 0
                            | 
0x430:                      | Stack:
